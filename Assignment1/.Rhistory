df_agree$vowel.test.y[df_agree$pred_rf == df_agree$pred_gbm]
sum(df_agree[df_agree$pred_rf == df_agree$pred_gbm] ==
df_agree$vowel.test.y[df_agree$pred_rf == df_agree$pred_gbm])
df_agree$[df_agree$pred_rf == df_agree$pred_gbm]
df_agree$pred_rf == df_agree$pred_gbm
sum(df_agree[df_agree$pred_rf == df_agree$pred_gbm]$pred_rf ==
df_agree$vowel.test.y[df_agree$pred_rf == df_agree$pred_gbm])
df_agree[df_agree$pred_rf == df_agree$pred_gbm]$pred_rf
predDF <- data.frame(pred_rf, pred_gbm, y = vowel.test$y)
# Accuracy among the test set samples where the two methods agree
sum(pred_rf[predDF$pred_rf == predDF$pred_gbm] ==
predDF$y[predDF$pred_rf == predDF$pred_gbm]) /
sum(predDF$pred_rf == predDF$pred_gbm)
pred_rf[df_agree$pred_rf == df_agree$pred_gbm]
sum(pred_rf[df_agree$pred_rf == df_agree$pred_gbm] ==
df_agree$vowel.test.y[df_agree$pred_rf == df_agree$pred_gbm]) /
sum(df_agree$pred_rf == df_agree$pred_gbm)
set.seed(3433)
set.seed(3433)
data(AlzeimerDisease)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzeimerDisease)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData<-data.frame(diagnosis, predictors)
inTrain<-createDataPartition(adData$diagnosis, p=3/4)[[1]]
training<-adData[inTrain]
testing<-adData[-inTrain]
training<-adData[inTrain,]
testing<-adData[-inTrain,]
set.seed=62433
mod_rf<-train(diagnosis~., method="rf", data=training)
mod_lda<-train(diagnosis~., method="lda", data=training)
mod_gmb<-train(diagnosis~., method="gbm", data=training)
mod_rf<-train(diagnosis~., method="rf", data=training)
mod_lda<-train(diagnosis~., method="lda", data=training)
mod_gmb<-train(diagnosis~., method="gbm", data=training, verbose=F)
pred_rf<-predict(mod_rf, testing)
pred_lda<-predict(mod_lda, testing)
pred_gmb<-predict(mod_gmb, testing)
df<-data.frame(pred_rf, pred_lda, pred_gmb, testing$diagnosis)
mod_comb<-train(diagnosis~., method="rf", data=df)
df<-data.frame(pred_rf, pred_lda, pred_gmb, testing$diagnosis)
mod_comb<-train(diagnosis~., method="rf", data=df)
predDF <- data.frame(pred_rf, pred_gbm, pred_lda, diagnosis = testing$diagnosis)
predDF <- data.frame(pred_rf, pred_gmb, pred_lda, diagnosis = testing$diagnosis)
combModFit <- train(diagnosis ~ ., method = "rf", data = predDF)
combPred <- predict(combModFit, predDF)
confusionMatrix(pred_rf, testing$diagnosis)$overall[1]
confusionMatrix(pred_lda, testing$diagnosis)$overall[1]
confusionMatrix(pred_gmb, testing$diagnosis)$overall[1]
confusionMatrix(combPred, testing$diagnosis)$overall[1]
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain(concrete$CompressiveStrength, p=3/4)[[1]]
training<-concrete[inTrain,]
testing<-[-inTrain,]
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain(concrete$CompressiveStrength, p=3/4)[[1]]
training<-concrete[inTrain,]
testing<-concrete[-inTrain,]
set.seed(233)
mod_lsso<-train(CompressiveStrength, data=testing, method="lasso")
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain(concrete$CompressiveStrength, p=3/4)[[1]]
training<-concrete[inTrain,]
testing<-concrete[-inTrain,]
set.seed(233)
mod_lsso<-train(CompressiveStrength, data=testing, method="lasso")
head(lasso)
head(concrete)
head(testing)
inTrain(concrete$CompressiveStrength, p=3/4)[[1]]
training<-concrete[inTrain,]
testing<-concrete[-inTrain,]
set.seed(233)
mod_lsso<-train(CompressiveStrength, data=testing, method="lasso")
mod_lsso<-train(CompressiveStrength~., data=testing, method="lasso")
mod_lsso<-train(CompressiveStrength~., data=testing, method="lasso")
mod_lsso
?plot.enet
plot.enet(mod_lsso$finalModel, xvar="penalty", use.color=T)
dat<-read.csv(file="https://d396qusza40orc.cloudfront.net/predmachlearn/gaData.csv", header=T)
rm(list=ls())
1library(lubridate)
dat<-read.csv(file="https://d396qusza40orc.cloudfront.net/predmachlearn/gaData.csv", header=T)
library(lubridate)
dat<-read.csv(file="https://d396qusza40orc.cloudfront.net/predmachlearn/gaData.csv", header=T)
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
library(lubridate)
dat<-read.csv(file="https://d396qusza40orc.cloudfront.net/predmachlearn/gaData.csv", header=T)
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
library(forecast)
install.packages("forecast")
library(forecast)
mod_ts<-bats(tstrain)
fcast <- forecast(mod_ts, level = 95, h = dim(testing)[1])
sum(fcast$lower < testing$visitsTumblr & testing$visitsTumblr < fcast$upper) /
dim(testing)[1]
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed=325
library(e1071)
summary(concrete)
modsv<-svm(CompressiveStrength~., data=training)
pred<-predict(modsv, testing)
pred<-predict(modsv, test)
pred<-predict(modsv, test)
pred<-predict(modsv, testing)
pred
accuracy(pred, testing$CompressiveStrength)
mr(ls=list())
rm(ls=list())
rm(list=ls())
106012.265/26
4077.395/80
a<-113963.179/26
a/80
b<-a/80
a
a<-67879.12
a<-67879.12+76450.7
a
s<-67536.91+76202.65
s
76202.65-48384.41
76202.65+27818.24
a<-77218.24+67717.29
a
810*26
482*26
77218.24-48384.41
100000-77218.24
809.53/148
533.57/129
389372/105
254.21/77
389.72/105
install.packages("plotly")
library(plotly)
plot_ly(mtcars, x=wt, y=mpg, mode="markers")
library(plotly)
install.packages("ggplot2")
library(plotly)
plot_ly(mtcars, x=wt, y=mpg, mode="markers")
head mtcars
head (mtcars)
plot_ly(mtcars, x=mtcars$wt, y=mpg, mode="markers")
plot_ly(mtcars, x=wt, y=mpg, mode="markers")
plot_ly(mtcars, x = wt, y = mpg, mode = "markers")
plot_ly(mtcars, x = mtcars$wt, y = mpg, mode = "markers")
plot_ly(mtcars, x = mtcars$wt, y = mtcars$mpg, mode = "markers")
?table
plot_ly(mtcars, x = mtcars$wt, y = mtcars$mpg, mode = "markers", color=as.factor(cyl))
plot_ly(mtcars, x = mtcars$wt, y = mtcars$mpg, mode = "markers", color=as.factor(mtcars$cyl))
plot_ly(mtcars, x = mtcars$wt, y = mtcars$mpg, mode = "markers", color=disp)
plot_ly(mtcars, x = mtcars$wt, y = mtcars$mpg, mode = "markers", color=mtcars$disp)
plot_ly(mtcars, x = wt, y = mpg, mode = "markers", color=mtcars$disp)
plot_ly(mtcars, x = mtcars$wt, y = mtcars$mpg, mode = "markers", color=mtcars$disp)
plot_ly(mtcars, x = mtcars$wt, y = mtcars$mpg, mode = "markers", color=as.factor(mtcars$cyl), size=hp)
plot_ly(mtcars, x = mtcars$wt, y = mtcars$mpg, mode = "markers", color=as.factor(mtcars$cyl), size=mtcars$hp)
data(mtcars)
plot_ly(mtcars, x = mtcars$wt, y = mtcars$mpg, mode = "markers", color=as.factor(mtcars$cyl), size=hp)
set.seed(2016-07-21)
temp <- rnorm(100, mean = 30, sd = 5)
pressue <- rnorm(100)
dtime <- 1:100
plot_ly(x = temp, y = pressue, z = dtime,
type = "scatter3d", mode = "markers", color = temp)
data("airmiles")
head(airmiles)
str(airmiles)
dim(airmiles)
length(airmiles)
plot_ly(x = time(airmiles), y = airmiles)
?gather
data("EuStockMarkets")
stocks <- as.data.frame(EuStockMarkets) %>%
gather(index, price) %>%
mutate(time = rep(time(EuStockMarkets), 4))
library(plotly)
library(tidyr)
library(dplyr)
data("EuStockMarkets")
stocks <- as.data.frame(EuStockMarkets) %>%
gather(index, price) %>%
mutate(time = rep(time(EuStockMarkets), 4))
s2<-gather(stocks, index, price)
head stocks
head (stocks)
head(s2)
head(EuStockMarkets)
?rep
?time
length(stocks)
dim(stocks)
nrow(EuStockMarkets)
rep("a")
rep(b)
rep(stocks)
library(plotly)
library(tidyr)
library(dplyr)
data("EuStockMarkets")
stocks <- as.data.frame(EuStockMarkets) %>%
gather(index, price) %>%
mutate(time = rep(time(EuStockMarkets), 4))
head(EuStockMarkets)
head(stocks)
head(time(EuStockMarkets))
plot_ly(stocks, x = time, y = price, color = index)
plot_ly(stocks, x = time, y = stocks$price, color = index)
lot_ly(stocks, x = stocks$time, y = stocks$price, color = stocks$index)
plot_ly(stocks, x = stocks$time, y = stocks$price, color = stocks$index)
terrain1 <- matrix(rnorm(100*100), nrow = 100, ncol = 100)
plot_ly(z = terrain1, type = "heatmap")
terrain2 <- matrix(sort(rnorm(100*100)), nrow = 100, ncol = 100)
plot_ly(z = terrain2, type = "surface")
state_pop <- data.frame(State = state.abb, Pop = as.vector(state.x77[,1]))
# Create hover text
state_pop$hover <- with(state_pop, paste(State, '<br>', "Population:", Pop))
state_pop$hover2 <-  paste(State, '<br>', "Population:", Pop)
borders <- list(color = toRGB("red"))
map_options <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showlakes = TRUE,
lakecolor = toRGB('white')
)
plot_ly(state_pop, z=Pop, text=hover, locations=State,
type='choropleth', locationmode='USA-States',
color=Pop, colors='Blues', marker=list(line=borders))%>%
layout=(title='US Populations in 1975', geo=map_options)
plot_ly(state_pop, z=Pop, text=hover, locations=State,
type='choropleth', locationmode='USA-States',
color=Pop, colors='Blues', marker=list(line=borders))%>%
layout(title='US Populations in 1975', geo=map_options)
plot_ly(state_pop, z=state_pop$Pop, text=state_pop$hover, locations=State,
type='choropleth', locationmode='USA-States',
color=Pop, colors='Blues', marker=list(line=borders))%>%
layout(title='US Populations in 1975', geo=map_options)
plot_ly(state_pop, z=state_pop$Pop, text=state_pop$hover, locations=state_pop$State,
type='choropleth', locationmode='USA-States',
color=Pop, colors='Blues', marker=list(line=borders))%>%
layout(title='US Populations in 1975', geo=map_options)
plot_ly(state_pop, z=state_pop$Pop, text=state_pop$hover, locations=state_pop$State,
type='choropleth', locationmode='USA-States',
color=state_pop$Pop, colors='Blues', marker=list(line=borders))%>%
layout(title='US Populations in 1975', geo=map_options)
plot_ly(state_pop, z = Pop, text = hover, locations = State,
type = 'choropleth', locationmode = 'USA-states',
color = Pop, colors = 'Blues', marker = list(line = borders)) %>%
layout(title = 'US Population in 1975', geo = map_options)
plot_ly(state_pop, z = state_pop$Pop, text = state_pop$hover, locations = state_pop$State,
type = 'choropleth', locationmode = 'USA-states',
color = state_pop$Pop, colors = 'Blues', marker = list(line = borders)) %>%
layout(title = 'US Population in 1975', geo = map_options)
plot_ly(state_pop, z=state_pop$Pop, text=state_pop$hover, locations=state_pop$State,
type = 'choropleth', locationmode = 'USA-states',
color=state_pop$Pop, colors='Blues', marker=list(line=borders))%>%
layout(title='US Populations in 1975', geo=map_options)
plot_ly(state_pop, z=state_pop$Pop, text=state_pop$hover, locations=state_pop$State,
type='choropleth', locationmode='USA-States',
color=state_pop$Pop, colors='Blues', marker=list(line=borders))%>%
layout(title='US Populations in 1975', geo=map_options)
plot_ly(state_pop, z=state_pop$Pop, text=state_pop$hover, locations=state_pop$State,
type='choropleth', locationmode='USA-states',
color=state_pop$Pop, colors='Blues', marker=list(line=borders))%>%
layout(title='US Populations in 1975', geo=map_options)
head(EuStockMarkets)
terrain2 <- matrix(sort(rnorm(100*100)), nrow = 100, ncol = 100)
plot_ly(z = terrain2, type = "surface")
library(plotly)
library(tidyr)
library(dplyr)
data("EuStockMarkets")
stocks <- as.data.frame(EuStockMarkets) %>%
gather(index, price) %>%
mutate(time = rep(time(EuStockMarkets), 4))
plot_ly(stocks, x = stocks$time, y = stocks$price, color = stocks$index)
G <- gvisGeoChart(Exports, locationvar="Country",
colorvar="Profit",options=list(width=600, height=400))
print(G,"chart")
##sepecify a region
G1<- gvisGeoChart(Exports, locationvar = "Country",
colorvar="Profit", options=list(width=600, height=400, region=250))
G <- gvisGeoChart(Exports, locationvar="Country",
colorvar="Profit",options=list(width=600, height=400))
print(G,"chart")
library(shiny)
library(miniUI)
pickTrees <- function() {
ui <- miniPage(
gadgetTitleBar("Select Points by Dragging your Mouse"),
miniContentPanel(
plotOutput("plot", height = "100%", brush = "brush")
)
)
server <- function(input, output, session) {
output$plot <- renderPlot({
plot(trees$Girth, trees$Volume, main = "Trees!",
xlab = "Girth", ylab = "Volume")
})
observeEvent(input$done, {
stopApp(brushedPoints(trees, input$brush,
xvar = "Girth", yvar = "Volume"))
})
}
runGadget(ui, server)
}
pickTrees()
library(leaflet)
my_map<-leaflet()%>%
addTiles()
my_map
my_map<-my_map %>%
addMarkers(lat=39.2980803, lng= -76.5898801,
popup="Jeff Leek's Office")
my_map
require(XML)
require(XML)
library(plyr)
library(dplyr)
library(stringr)
library(ggmap)
library(leaflet)
source('time_match.R')
xml_file<-choose.files()
xml_File<-xmlInternalTreeParse(xml_file)
#pull data in from tcx fil
data<-xmlParse(xml_file)
#put into a list
xml_data<-xmlToList(data)
#Filter the XML list down to get to the workout data
temps <- xml_data[["Activities"]][["Activity"]][["Lap"]][["Track"]]
#Transfer content into a data frame
df2<-ldply(temps, data.frame)
colnames(df2)<-c("Label","Time","Latitude","Longitude","Meters_Altitude","Meters_Distance")
# Convert columns to numeric
df2$Meters_Distance<- as.numeric(as.character(df2$Meters_Distance))
df2$Meters_Altitude<- as.double(as.character(df2$Meters_Altitude))
df2$Time<- as.POSIXlt(str_replace_all(as.character(df2$Time), "T", " "))
df2$Latitude<- as.numeric(as.character(df2$Latitude))
df2$Longitude<- as.numeric(as.character(df2$Longitude))
#append extra columns
df2<-mutate(df2, Meters_Interval=Meters_Distance- lag(Meters_Distance, default=0))
df2<-mutate(df2, Miles=floor(1+(Meters_Distance/1609.344)))
df2<-mutate(df2,DateTime=as.POSIXct(Time))
df2<-mutate(df2,Elapsed_Time=(DateTime-DateTime[1])/60)
##Assemble Runmap
## interactive_map(mean(df2$Latitude), mean(df2$Longitude))
center<-as.array(c(mean(df2$Longitude), mean(df2$Latitude)))
##Weather data here:
res <- revgeocode(center, output="more")
zCode<-res$postal_code
wd<-format(df2[1,9],"%Y%/%m%/%d")
w_url<-paste("https://www.wunderground.com/history/airport/KXLL/",wd,"/DailyHistory.html?reqdb.zip=",zCode,"&reqdb.magic=1&reqdb.wmo=99999&format=1", sep="")
weather<-read.csv(url(w_url))
##Clean up weather data
weather$DateUTC.br...<-as.character(weather$DateUTC.br...)
colnames(weather)<-c("TimEDT","TemperatureF","Dew.PointF","Humidity","Sea.Level.PressureIn","VisibilityMPH","Wind.Direction","Wind.SpeedMPH","Gust.SpeedMPH","PrecipitationIn","Events","Conditions","WindDirDegrees","DateUTC")
weather$DateUTC<-gsub("<br />","",weather$DateUTC)
weather$DateUTC<-as.POSIXlt(weather$DateUTC)
weather$DateEST<-weather$DateUTC
weather$DateEST$hour<-weather$DateEST$hour-4
##merge weather with Run data
df2$index<-sapply(df2$DateTime,Match_Time)
df2$TemperatureF<-weather[df2$index,2]
df2$Dew.PointF<-weather[df2$index,3]
df2$Humidity<-weather[df2$index,4]
df2$Sea.Level.PressureIn<-weather[df2$index,5]
df2$VisibilityMPH<-weather[df2$index,6]
df2$Wind.Direction<-weather[df2$index,7]
df2$Wind.SpeedMPH<-weather[df2$index,8]
df2$Gust.SpeedMPH<-weather[df2$index,9]
df2$PrecipitationIn<-weather[df2$index,10]
df2$Events<-weather[df2$index,11]
df2$Conditions<-weather[df2$index,12]
df2$WindDirDegrees<-weather[df2$index,13]
interactive_map(mean(df2$Latitude), mean(df2$Longitude))
source('time_match.R')
setwd("~/Coursera/Developing Data Products/FirstApp/DevelopingDataProducts/Assignment1")
require(XML)
library(plyr)
library(dplyr)
library(stringr)
library(ggmap)
library(leaflet)
source('time_match.R')
xml_file<-choose.files()
xml_File<-xmlInternalTreeParse(xml_file)
#pull data in from tcx fil
data<-xmlParse(xml_file)
#put into a list
xml_data<-xmlToList(data)
#Filter the XML list down to get to the workout data
temps <- xml_data[["Activities"]][["Activity"]][["Lap"]][["Track"]]
#Transfer content into a data frame
df2<-ldply(temps, data.frame)
colnames(df2)<-c("Label","Time","Latitude","Longitude","Meters_Altitude","Meters_Distance")
# Convert columns to numeric
df2$Meters_Distance<- as.numeric(as.character(df2$Meters_Distance))
df2$Meters_Altitude<- as.double(as.character(df2$Meters_Altitude))
df2$Time<- as.POSIXlt(str_replace_all(as.character(df2$Time), "T", " "))
df2$Latitude<- as.numeric(as.character(df2$Latitude))
df2$Longitude<- as.numeric(as.character(df2$Longitude))
#append extra columns
df2<-mutate(df2, Meters_Interval=Meters_Distance- lag(Meters_Distance, default=0))
df2<-mutate(df2, Miles=floor(1+(Meters_Distance/1609.344)))
df2<-mutate(df2,DateTime=as.POSIXct(Time))
df2<-mutate(df2,Elapsed_Time=(DateTime-DateTime[1])/60)
##Assemble Runmap
## interactive_map(mean(df2$Latitude), mean(df2$Longitude))
center<-as.array(c(mean(df2$Longitude), mean(df2$Latitude)))
##Weather data here:
res <- revgeocode(center, output="more")
zCode<-res$postal_code
wd<-format(df2[1,9],"%Y%/%m%/%d")
w_url<-paste("https://www.wunderground.com/history/airport/KXLL/",wd,"/DailyHistory.html?reqdb.zip=",zCode,"&reqdb.magic=1&reqdb.wmo=99999&format=1", sep="")
weather<-read.csv(url(w_url))
##Clean up weather data
weather$DateUTC.br...<-as.character(weather$DateUTC.br...)
colnames(weather)<-c("TimEDT","TemperatureF","Dew.PointF","Humidity","Sea.Level.PressureIn","VisibilityMPH","Wind.Direction","Wind.SpeedMPH","Gust.SpeedMPH","PrecipitationIn","Events","Conditions","WindDirDegrees","DateUTC")
weather$DateUTC<-gsub("<br />","",weather$DateUTC)
weather$DateUTC<-as.POSIXlt(weather$DateUTC)
weather$DateEST<-weather$DateUTC
weather$DateEST$hour<-weather$DateEST$hour-4
##merge weather with Run data
df2$index<-sapply(df2$DateTime,Match_Time)
df2$TemperatureF<-weather[df2$index,2]
df2$Dew.PointF<-weather[df2$index,3]
df2$Humidity<-weather[df2$index,4]
df2$Sea.Level.PressureIn<-weather[df2$index,5]
df2$VisibilityMPH<-weather[df2$index,6]
df2$Wind.Direction<-weather[df2$index,7]
df2$Wind.SpeedMPH<-weather[df2$index,8]
df2$Gust.SpeedMPH<-weather[df2$index,9]
df2$PrecipitationIn<-weather[df2$index,10]
df2$Events<-weather[df2$index,11]
df2$Conditions<-weather[df2$index,12]
df2$WindDirDegrees<-weather[df2$index,13]
interactive_map(mean(df2$Latitude), mean(df2$Longitude))
require(XML)
library(plyr)
library(dplyr)
library(stringr)
library(ggmap)
library(leaflet)
s
source('time_match.R')
xml_File<-xmlInternalTreeParse(xml_file)
#pull data in from tcx fil
data<-xmlParse(xml_file)
#put into a list
xml_data<-xmlToList(data)
temps <- xml_data[["Activities"]][["Activity"]][["Lap"]][["Track"]]
#Transfer content into a data frame
df2<-ldply(temps, data.frame)
colnames(df2)<-c("Label","Time","Latitude","Longitude","Meters_Altitude","Meters_Distance")
df2$Meters_Distance<- as.numeric(as.character(df2$Meters_Distance))
df2$Meters_Altitude<- as.double(as.character(df2$Meters_Altitude))
df2$Time<- as.POSIXlt(str_replace_all(as.character(df2$Time), "T", " "))
df2$Latitude<- as.numeric(as.character(df2$Latitude))
df2$Longitude<- as.numeric(as.character(df2$Longitude))
View(df2)
df2$Time<- str_replace_all(as.character(df2$Time), "T", " ")
df2$Time<-as.POSIXlt(df2$Time)
df3<-df2
df2$Latitude<- as.numeric(as.character(df2$Latitude))
require(XML)
library(plyr)
library(dplyr)
library(stringr)
library(ggmap)
library(leaflet)
source('time_match.R')
xml_file<-choose.files()
xml_File<-xmlInternalTreeParse(xml_file)
#pull data in from tcx fil
data<-xmlParse(xml_file)
#put into a list
xml_data<-xmlToList(data)
#Filter the XML list down to get to the workout data
temps <- xml_data[["Activities"]][["Activity"]][["Lap"]][["Track"]]
#Transfer content into a data frame
df2<-ldply(temps, data.frame)
colnames(df2)<-c("Label","Time","Latitude","Longitude","Meters_Altitude","Meters_Distance")
df2$Meters_Distance<- as.numeric(as.character(df2$Meters_Distance))
df2$Meters_Altitude<- as.double(as.character(df2$Meters_Altitude))
# df2$Time<- as.POSIXlt(str_replace_all(as.character(df2$Time), "T", " "))
df2$Time<- str_replace_all(as.character(df2$Time), "T", " ")
View(df3)
df2$Time<-as.POSIXlt(df2$Time)
as.POSIXlt("2016-11-06 13:00:27+00:00")
